#+TITLE: Emacs config

* UI settings

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq ido-enable-flex-matching t)
(ido-mode t)
(global-hl-line-mode t)
(global-linum-mode t)
(setq-default line-spacing 4)
(setq-default cursor-type 'box)
(setq linum-format (quote "%4d "))

(setq whitespace-style (quote (tabs trailing newline tab-mark newline-mark)))
(setq whitespace-display-mappings
  ;; all numbers are Unicode codepoint in decimal. ‚Åñ (insert-char 182 1)
  '(
    (space-mark 32 [183] [46])
    (newline-mark 10 [172 10])
    (tab-mark 9 [9656 9] [92 9])
    ))
(global-whitespace-mode t)
(set-face-attribute 'whitespace-newline nil
                    :background nil
                    :foreground "DimGrey")
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Font settings

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-10:medium"))
(set-face-attribute 'default nil :font "JetBrains Mono-10" )
(set-frame-font "JetBrains Mono-10" nil t)
#+END_SRC

* General config

** Variables

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
(setq make-backup-files nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq sh-basic-offset 2)
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)
(setq ido-enable-flex-matching t)
(setq mmm-submode-decoration-level 0)
(setq mocha-snippets-use-fat-arrows t)
(setq x-select-enable-clipboard t)
(prefer-coding-system 'utf-8-unix)
(global-prettify-symbols-mode 0)
(electric-pair-mode t)
#+END_SRC

** Hooks

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Aliases

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Package bootstrap

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

;; Activate installed packages
(package-initialize)

;; Bootstrap `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

* Configure packages

** Diminish

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (diminish 'undo-tree-mode)
  (diminish 'eldoc-mode)
  (diminish 'auto-revert-mode)
  (diminish 'global-whitespace-mode)
  (diminish 'visual-line-mode))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-project-search-path '("~/workspace/"))
  :config
  (projectile-global-mode t)
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (add-to-list 'projectile-globally-ignored-directories "spec/cassettes")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".map"))
#+END_SRC
** Evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq-default evil-normal-state-cursor 'box)
  (setq-default evil-want-C-u-scroll t)
  (setq-default evil-shift-width 2)
  (setq evil-ex-substitute-global t)
  :config
  (evil-mode 1))

(use-package evil-surround
  :config
  (global-evil-surround-mode t))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :config
  (load-theme 'gruvbox t))
#+END_SRC
** Org

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  ; :config
  ; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  :init
  (setq org-directory "~/org/")
  (setq org-agenda-files (directory-files-recursively org-directory "\.org$"))
  (setq org-default-notes-file (concat org-directory "refile.org"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-return-follows-link t)
  (setq org-hide-leading-stars 1)
  (setq org-priority-start-cycle-with-default t)
  (setq org-default-priority ?C)
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?E)
  (setq org-priority-faces '(
    (?A :foreground "orange" :weight "bold")
    (?B :foreground "yellow")
    (?C :foreground "forestgreen")
    (?D :foreground "dodgerblue")
    (?E :foreground "gray")
  ))
  (setq org-capture-templates '(
    ("t" "Task" entry (file+headline "index.org" "Tasks")
                      (file "templates/task.orgtemplate"))
    ("m" "Work meeting" entry (file+headline "work.org" "Events")
                              (file "templates/work-meeting.orgtemplate"))
    ("g" "Groceries" checkitem (file+headline "index.org" "Groceries")
                               (file "templates/groceries.orgtemplate"))))
  :custom-face
  (org-document-title ((t (:foreground "#f90" :weight bold))))
  (org-block-begin-line ((t (:foreground "#777" :background nil))))
  (org-block-end-line ((t (:foreground "#777" :background nil)))))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-default-theme))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
(global-linum-mode t)
(use-package hlinum
  :config
  (hlinum-activate))
#+END_SRC

** Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :init
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  :config
  (ivy-mode 1))

(use-package counsel)
#+END_SRC

** Vertical column (fci)

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :init
  (setq-default fill-column 80)
  (setq fci-rule-column 81)
  (setq fci-rule-color "#777")
  :hook
  ('after-change-major-mode . 'fci-mode)-
  :config
  (fci-mode 1))
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :hook
  ('git-commit-mode . 'evil-emacs-state)
  :custom-face
  (magit-branch-remote ((t (:foreground "orange")))))

(use-package diff-hl
  :config
  (global-diff-hl-mode 1))
#+END_SRC
** Fuzzy matching

#+BEGIN_SRC emacs-lisp
(use-package flx)
#+END_SRC
** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :init
  (setq markdown-command "/usr/bin/marked")
  (setq markdown-fontify-code-blocks-natively t)
  :custom-face
  (markdown-code-face ((t (:inherit nil)))))
#+END_SRC

** Olivetti

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :diminish olivetti-mode
  :config
  (olivetti-set-width 84))
#+END_SRC

** Javascript

*** Regular Javascript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (setq js-indent-level 2)
  (setq typescript-indent-level 2)
  (setq-default js2-global-externs
                '("module"
                  "exports"
                  "require"
                  "process"
                  "setTimeout"
                  "clearTimeout"
                  "setInterval"
                  "clearInterval"
                  "window"
                  "location"
                  "__dirname"
                  "console"
                  "JSON"
                  "before"
                  "beforeEach"
                  "after"
                  "afterEach"
                  "describe"
                  "it"
                  "expect"
                  "fetch")))
#+END_SRC

*** React

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :mode
  "components\\/.*\\.js\\'"
  "pages\\/.*\\.js\\'")
#+END_SRC

** CSS

#+BEGIN_SRC emacs-lisp
(setq css-indent-offset 2)
(use-package scss-mode
  :mode
  "\\.scss\\'"
  :init
  (setq scss-indent-level 2))
#+END_SRC

** Rainbow

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :config
  (rainbow-mode 1))
#+END_SRC

** File explorer

#+BEGIN_SRC emacs-lisp
(use-package treemacs)
#+END_SRC

** Emmet

Expand HTML through CSS selectors.

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode)
#+END_SRC

** Origami :folding:
#+BEGIN_SRC emacs-lisp
(use-package origami
  :config
  (global-origami-mode))
#+END_SRC
** Which-key

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
   :diminish which-key-mode
   :hook
   ('after-init . 'which-key-mode))
   #+END_SRC

** Find stuff in files (rg, ack, ag, ...)

   #+BEGIN_SRC emacs-lisp
   (use-package ripgrep)
   (use-package ag)
   #+END_SRC

** Yaml

   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
   #+END_SRC

** Autofill

#+BEGIN_SRC emacs-lisp
(use-package filladapt
  :diminish filladapt-mode
  :hook
  (markdown-mode . filladapt-mode)
  (org-mode . filladapt-mode))
#+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
(use-package general
  :config (general-define-key
    :states '(normal)
    :prefix ","
    "a" 'counsel-ag
    "b" 'ibuffer-other-window
    "d" 'kill-this-buffer
    "gbb" 'magit-blame
    "gbq" 'magit-blame-quit
    "gs" 'magit-status
    "h" 'ivy-resume
    "m" 'treemacs
    "p" 'projectile-switch-project
    "t" 'projectile-find-file
    "w" 'save-buffer
    "x" 'execute-extended-command
    "1" 'org-agenda-list
    "2" 'org-todo-list
    "3" 'org-capture
    "SPC" 'evil-switch-to-windows-last-buffer
    "=" (lambda() (interactive) (find-file "~/.config/emacs/config.org"))
    "RET" 'projectile-run-eshell)
  (general-define-key
    "C-S-y" 'emmet-expand-yas))
#+END_SRC

* File associations

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.xprofile\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.muttrc\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.dunstrc\\'" . conf-mode))
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-global-mode
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets)
#+END_SRC
* Autorun

Because a list of tasks is more useful than an empty buffer.

#+BEGIN_SRC emacs-lisp
(org-todo-list)
#+END_SRC
